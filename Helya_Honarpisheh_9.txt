import numpy as np
import matplotlib.pyplot as plt

# Function to simulate the wave pattern
def phased_array_simulation(M, aperture, wavelength, alpha_deg, Nx=1000, Ny=1000):
    k = 2 * np.pi / wavelength  # Wave number
    alpha_rad = np.radians(alpha_deg)  # Steering angle in radians
    x = np.linspace(-0.5, 0.5, Nx)  # 1m x 1m grid
    y = np.linspace(-0.5, 0.5, Ny)
    X, Y = np.meshgrid(x, y)
    
    # Source positions 
    source_positions = np.linspace(-aperture / 2, aperture / 2, M)
    
    # Compute phase delays for steering
    delta = np.sin(alpha_rad) * source_positions
    phase_delays = 2 * np.pi * delta / wavelength  # Phase delays in radians
    
    # Initialize wave pattern
    Z = np.zeros((Ny, Nx))
    for pos_y, phase in zip(source_positions, phase_delays):
        distance = np.sqrt((X + 0.5) ** 2 + (Y - pos_y) ** 2)  # Sources on the left side at x = -0.5
        Z += np.cos(k * distance + phase)  # Add phase delay for steering
    
    # Normalize for visualization
    Z_normalized = Z / np.max(np.abs(Z))
    return Z_normalized, source_positions

# Interactive user inputs for angle steering
print("Enter parameters for the phased array simulation:")
M = int(input("Number of sources (M): "))  # = 5
aperture = float(input("Aperture size (meters): "))  # optimized = 0.5
wavelength = float(input("Wavelength (meters): "))  # optimized = 0.05
alpha = float(input("Steering angle (degrees): "))  # optimized = 30

# Simulate the beam pattern
Z_normalized, source_positions = phased_array_simulation(M, aperture, wavelength, alpha)

# Plot the beam pattern ### chatGPT
plt.figure(figsize=(8, 6))
plt.title(f"Phased Array Beam Pattern (Steered to {alpha}Â°)")
plt.imshow(Z_normalized, extent=(-0.5, 0.5, -0.5, 0.5), cmap="viridis", origin="lower")
for pos_y in source_positions:
    plt.plot(-0.5, pos_y, 'ro', label="Source Points" if pos_y == source_positions[0] else "")
plt.colorbar(label="Normalized Intensity")
plt.xlabel("x (meters)")
plt.ylabel("y (meters)")
plt.legend()
plt.show()
